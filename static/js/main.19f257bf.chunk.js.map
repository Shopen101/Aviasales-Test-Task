{"version":3,"sources":["store/tickets/contracts/actionTypes.ts","store/tickets/contracts/state.ts","store/tickets/reducer.ts","store/tickets/actionCreator.ts","api/index.ts","store/tickets/sagas.ts","store/saga.ts","store/store.ts","store/tickets/selectors.ts","assets/logo.svg","components/ListOfCheckBox.tsx","components/SortCheckbox.tsx","utils/formatPrice.ts","utils/getRandomNum.ts","utils/formateDate.ts","components/Ticket.tsx","components/ButtonsGroup.tsx","components/ShowFiveMore.tsx","App.tsx","theme.ts","index.tsx"],"names":["TicketsActionsType","LoadingState","initialTicketsState","tickets","sortedTickets","loadingState","NEVER","ticketReducer","produce","draft","action","type","SET_TICKETS","payload","LOADED","SET_SORTED_TICKETS","FETCH_TICKETS","LOADING","SET_LOADING_STATE","setSortedTickets","setLoadingState","AviaApi","axios","get","searchId","data","fetchAddTicketRequest","tweetsSaga","call","sort","ticket1","ticket2","price","put","ERROR","takeEvery","rootSaga","spawn","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","selectTickets","state","selectSortedTickets","selectLoadingState","useStyles","makeStyles","theme","createStyles","root","width","backgroundColor","palette","background","paper","borderRadius","checkBox","icon","height","padding","margin","border","checkedIcon","primary","main","display","content","backgroundPosition","ListPadding","listItem","ListOfCheckBox","React","memo","allTickets","classes","useState","countOfAllButtonCheckbox","setCountOfAllButtonCheckbox","dispatch","useDispatch","allSortedTickets","useSelector","filtredTickets","useRef","current","useEffect","console","log","name","checked","transferArr","setTransferArr","List","className","map","item","index","labelId","ListItem","role","undefined","dense","button","onClick","checkbox","value","filteredTicketsOneSort","filter","segments","stops","length","filteredTicketsTwoSort","Array","from","Set","filteredTickets","handleToggle","ListItemIcon","Checkbox","edge","disableRipple","inputProps","clsx","style","color","position","top","left","ListItemText","id","prevProps","nextProps","JSON","stringify","flexGrow","spacing","textAlign","text","secondary","boxShadow","maxWidth","headerText","fontSize","SortCheckbox","Paper","Typography","variant","align","formatter","Intl","NumberFormat","getRandomNum","min","max","Math","round","random","formatDurationToHoursAndMinutes","duration","hours","floor","minutes","formatDateToHoursAndMinutes","date","format","Date","paddingTop","flexFlow","marginBottom","header","justifyContent","fontWeight","lineHeight","wayText","letterSpacing","timeText","infoBlock","alignItems","infoBlockData","Ticket","src","alt","segment","Box","mb","origin","destination","setMinutes","toString","Number","join","AntTabs","withStyles","indicator","Tabs","AntTab","textTransform","opacity","typography","fontWeightMedium","selected","props","Tab","leftBdrs","rightBdrs","ButtonsGroup","setValue","handleSortBtnClick","ticketsSorted","concat","avgPrice","reduce","sum","optimalFromPriceTickets","onChange","event","newValue","aria-label","label","btnText","ShowFiveMore","Button","circular","App","ticketsOnPageCount","setTicketsOnPageCount","Fragment","CssBaseline","Container","Grid","container","xs","mt","logo","CircularProgress","ticket","createTheme","default","subtitle1","subtitle2","overrides","MuiListItemIcon","minWidth","MuiTab","wrapper","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.19f257bf.chunk.js","sourcesContent":["import { Action } from 'redux'\r\nimport { LoadingState, IticketsState, Iticket } from './state'\r\n\r\nexport enum TicketsActionsType {\r\n    FETCH_TICKETS = 'tickets/FETCH_TICKETS',\r\n    SET_TICKETS = ' tickets/SET_TICKETS',\r\n    SET_SORTED_TICKETS = ' tickets/SET_SORTED_TICKETS',\r\n    SET_LOADING_STATE = 'tickets/SET_LOADING_STATE',\r\n}\r\n\r\nexport interface FetchTicketsActionInterface extends Action<TicketsActionsType> {\r\n    type: TicketsActionsType.FETCH_TICKETS\r\n}\r\n\r\nexport interface SetTicketsActionInterface extends Action<TicketsActionsType> {\r\n    type: TicketsActionsType.SET_TICKETS\r\n    payload: IticketsState['tickets']\r\n}\r\n\r\nexport interface SetSortedTicketsActionInterface extends Action<TicketsActionsType> {\r\n    type: TicketsActionsType.SET_SORTED_TICKETS\r\n    payload: Iticket[]\r\n}\r\n\r\nexport interface SetTicketsLoadingStateActionInterface extends Action<TicketsActionsType> {\r\n    type: TicketsActionsType.SET_LOADING_STATE\r\n    payload: LoadingState\r\n}\r\n\r\nexport type TicketActions =\r\n    | FetchTicketsActionInterface\r\n    | SetTicketsActionInterface\r\n    | SetTicketsLoadingStateActionInterface\r\n    | SetSortedTicketsActionInterface\r\n","export enum LoadingState {\r\n    LOADED = 'LOADED',\r\n    LOADING = 'LOADING',\r\n    ERROR = 'ERROR',\r\n    NEVER = 'NEVER',\r\n}\r\n\r\nexport interface Iticket {\r\n    // Цена в рублях\r\n    price: number\r\n    // Код авиакомпании (iata)\r\n    carrier: string\r\n    // Массив перелётов.\r\n    // В тестовом задании это всегда поиск \"туда-обратно\" значит состоит из двух элементов\r\n    segments: [\r\n        {\r\n            // Код города (iata)\r\n            origin: string\r\n            // Код города (iata)\r\n            destination: string\r\n            // Дата и время вылета туда\r\n            date: string\r\n            // Массив кодов (iata) городов с пересадками\r\n            stops: string[]\r\n            // Общее время перелёта в минутах\r\n            duration: number\r\n        },\r\n        {\r\n            // Код города (iata)\r\n            origin: string\r\n            // Код города (iata)\r\n            destination: string\r\n            // Дата и время вылета обратно\r\n            date: string\r\n            // Массив кодов (iata) городов с пересадками\r\n            stops: string[]\r\n            // Общее время перелёта в минутах\r\n            duration: number\r\n        },\r\n    ]\r\n}\r\n\r\nexport interface IticketsState {\r\n    tickets: Iticket[]\r\n    sortedTickets: Iticket[]\r\n    loadingState: LoadingState\r\n}","import produce, { Draft } from 'immer'\r\nimport { TicketActions } from './contracts/actionTypes'\r\nimport { TicketsActionsType } from './contracts/actionTypes'\r\nimport { LoadingState, IticketsState } from './contracts/state'\r\n\r\nconst initialTicketsState = {\r\n    tickets: [],\r\n    sortedTickets: [],\r\n    loadingState: LoadingState.NEVER,\r\n}\r\n\r\nexport const ticketReducer = produce((draft: Draft<IticketsState>, action: TicketActions) => {\r\n    switch (action.type) {\r\n        case TicketsActionsType.SET_TICKETS:\r\n            draft.tickets = action.payload\r\n            draft.loadingState = LoadingState.LOADED\r\n            break\r\n        case TicketsActionsType.SET_SORTED_TICKETS:\r\n            draft.sortedTickets = action.payload\r\n            break\r\n\r\n        case TicketsActionsType.FETCH_TICKETS:\r\n            draft.tickets = []\r\n            draft.loadingState = LoadingState.LOADING\r\n            break\r\n\r\n        case TicketsActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload\r\n            break\r\n    }\r\n}, initialTicketsState)\r\n","import {\r\n    SetTicketsLoadingStateActionInterface,\r\n    SetTicketsActionInterface,\r\n    SetSortedTicketsActionInterface,\r\n    FetchTicketsActionInterface,\r\n} from './contracts/actionTypes'\r\nimport { LoadingState, Iticket } from './contracts/state'\r\nimport { TicketsActionsType } from './contracts/actionTypes'\r\n\r\nexport const setTickets = (payload: Iticket[]): SetTicketsActionInterface => ({\r\n    type: TicketsActionsType.SET_TICKETS,\r\n    payload,\r\n})\r\n\r\nexport const setSortedTickets = (payload: Iticket[]): SetSortedTicketsActionInterface => ({\r\n    type: TicketsActionsType.SET_SORTED_TICKETS,\r\n    payload,\r\n})\r\n\r\nexport const fetchTickets = (): FetchTicketsActionInterface => ({\r\n    type: TicketsActionsType.FETCH_TICKETS,\r\n})\r\n\r\nexport const setLoadingState = (payload: LoadingState): SetTicketsLoadingStateActionInterface => ({\r\n    type: TicketsActionsType.SET_LOADING_STATE,\r\n    payload,\r\n})\r\n","import axios from 'axios'\r\nimport { Iticket } from '../store/tickets/contracts/state';\r\n\r\ninterface IgetSearchId {\r\n    searchId: string\r\n}\r\n\r\ninterface IgetTickets {\r\n    tickets: Iticket\r\n}\r\n\r\nexport const AviaApi = {\r\n    async getSearchId(): Promise<IgetSearchId> {\r\n        const { data: { searchId } } = await axios.get('https://front-test.beta.aviasales.ru/search')\r\n        return searchId\r\n    },\r\n\r\n    async getTickets(searchId: string): Promise<IgetTickets> {\r\n        const {data: { tickets }} = await axios.get(`https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`)\r\n        return tickets\r\n    }\r\n}\r\n\r\n","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport { TicketsActionsType } from './contracts/actionTypes'\r\nimport { Iticket, LoadingState } from './contracts/state'\r\nimport { setLoadingState, setTickets, setSortedTickets } from './actionCreator'\r\nimport { AviaApi } from '../../api/index'\r\n\r\nexport function* fetchAddTicketRequest(): Generator<unknown, any, any> {\r\n    try {\r\n        const searchId = yield call(AviaApi.getSearchId)\r\n        const tickets = yield call(AviaApi.getTickets, searchId)\r\n        tickets.sort((ticket1: Iticket, ticket2: Iticket): number => {\r\n            if (ticket1.price > ticket2.price) return 1\r\n            if (ticket1.price === ticket2.price) return 0\r\n            if (ticket1.price < ticket2.price) return -1\r\n            return 1\r\n        })\r\n        yield put(setTickets(tickets))\r\n        yield put(setSortedTickets(tickets))\r\n    } catch (error) {\r\n        yield put(setLoadingState(LoadingState.ERROR))\r\n    }\r\n}\r\n\r\nexport function* tweetsSaga() {\r\n    yield takeEvery(TicketsActionsType.FETCH_TICKETS, fetchAddTicketRequest)\r\n}\r\n","import { spawn } from 'redux-saga/effects'\r\nimport { tweetsSaga } from './tickets/sagas'\r\n\r\nexport default function* rootSaga() {\r\n    yield spawn(tweetsSaga)\r\n}\r\n","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport { ticketReducer } from './tickets/reducer'\r\nimport { IticketsState, LoadingState } from './tickets/contracts/state'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from './saga'\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n}\r\nconst composeEnhancers =\r\n    (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\r\n\r\nexport interface RootState {\r\n    tickets: IticketsState['tickets'],\r\n    sortedTickets: IticketsState['tickets'],\r\n    loadingState: LoadingState\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport const store = createStore(ticketReducer, composeEnhancers(applyMiddleware(sagaMiddleware)))\r\n\r\nsagaMiddleware.run(rootSaga)\r\n","import { RootState } from '../store'\r\nimport { LoadingState, Iticket } from './contracts/state'\r\n\r\nexport const selectTickets = (state: RootState): Iticket[] => state.tickets\r\nexport const selectSortedTickets = (state: RootState): Iticket[] => state.sortedTickets\r\nexport const selectLoadingState = (state: RootState): LoadingState => state.loadingState","export default __webpack_public_path__ + \"static/media/logo.f2ab8f4c.svg\";","import React, { useState } from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport clsx from 'clsx'\r\n\r\nimport CheckIcon from '@material-ui/icons/Check'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectSortedTickets } from '../store/tickets/selectors'\r\nimport { Iticket } from '../store/tickets/contracts/state'\r\nimport { setSortedTickets } from '../store/tickets/actionCreator'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n            borderRadius: 10,\r\n        },\r\n        checkBox: {},\r\n        icon: {\r\n            borderRadius: 2,\r\n            width: 20,\r\n            height: 20,\r\n            padding: '0px',\r\n            margin: '0px',\r\n            backgroundColor: '#fff',\r\n            border: '1px solid #9ABBCE',\r\n        },\r\n        checkedIcon: {\r\n            border: `1px solid ${theme.palette.primary.main}`,\r\n\r\n            '&:before': {\r\n                display: 'block',\r\n                content: '\"\"',\r\n                backgroundPosition: '20% 20%',\r\n            },\r\n        },\r\n        ListPadding: {\r\n            padding: '0 0 0 8px',\r\n        },\r\n        listItem: {\r\n            '&:hover': {\r\n                background: 'rgba(241, 252, 255, 1)',\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\ninterface ItransferArr {\r\n    name: string\r\n    checked: boolean\r\n}\r\n\r\ninterface propsInterface {\r\n    allTickets: Iticket[]\r\n}\r\n\r\nexport const ListOfCheckBox: React.FC<propsInterface> = React.memo(\r\n    ({ allTickets }: propsInterface): React.ReactElement => {\r\n        const classes = useStyles()\r\n        const [countOfAllButtonCheckbox, setCountOfAllButtonCheckbox] = useState<number>(0)\r\n        const dispatch = useDispatch()\r\n        const allSortedTickets = useSelector(selectSortedTickets)\r\n\r\n        let filtredTickets: { current: Iticket[] | [] } = React.useRef([])\r\n        filtredTickets.current = []\r\n\r\n        React.useEffect(() => {\r\n            console.log('релоад, детка!')\r\n        }, [])\r\n\r\n        const [transferArr, setTransferArr] = useState<Array<ItransferArr>>([\r\n            {\r\n                name: 'Все',\r\n                checked: true,\r\n            },\r\n            {\r\n                name: 'Без пересадок',\r\n                checked: true,\r\n            },\r\n            {\r\n                name: '1 пересадка',\r\n                checked: true,\r\n            },\r\n            {\r\n                name: '2 пересадки',\r\n                checked: true,\r\n            },\r\n            {\r\n                name: '3 пересадки',\r\n                checked: true,\r\n            },\r\n        ])\r\n\r\n        const handleToggle = (checkbox: ItransferArr, value: number) => {\r\n            if (value === 0) {\r\n                setTransferArr(\r\n                    transferArr.map((item, index) => {\r\n                        if (countOfAllButtonCheckbox % 2 === 0) {\r\n                            if (item.checked === true) {\r\n                                item.checked = false\r\n                            }\r\n                        } else {\r\n                            if (item.checked === false) {\r\n                                item.checked = true\r\n                            }\r\n                        }\r\n\r\n                        return item\r\n                    }),\r\n                )\r\n                setCountOfAllButtonCheckbox(countOfAllButtonCheckbox + 1)\r\n            } else {\r\n                transferArr[0].checked = false\r\n                setCountOfAllButtonCheckbox(1)\r\n\r\n                setTransferArr(\r\n                    transferArr.map((item, index) => {\r\n                        if (index === value) {\r\n                            item.checked = !item.checked\r\n                        }\r\n\r\n                        return item\r\n                    }),\r\n                )\r\n            }\r\n\r\n            if (value === 0) {\r\n                if (!checkbox.checked) {\r\n                    filtredTickets.current = []\r\n                    dispatch(setSortedTickets([]))\r\n                } else {\r\n                    filtredTickets.current = allTickets\r\n                    dispatch(setSortedTickets([...allTickets]))\r\n                }\r\n            } else {\r\n                if (checkbox.checked) {\r\n                    const filteredTicketsOneSort = allTickets.filter(\r\n                        item => item.segments[0].stops.length === value - 1,\r\n                    )\r\n                    const filteredTicketsTwoSort = allTickets.filter(\r\n                        item => item.segments[1].stops.length === value - 1,\r\n                    )\r\n                    \r\n                    dispatch(\r\n                        setSortedTickets(\r\n                            Array.from(\r\n                                new Set([\r\n                                    ...allSortedTickets,\r\n                                    ...filteredTicketsOneSort,\r\n                                    ...filteredTicketsTwoSort,\r\n                                ]),\r\n                            ),\r\n                        ),\r\n                    )\r\n                } else {\r\n                    const filteredTickets = allSortedTickets\r\n                        .filter(item => item.segments[0]?.stops.length !== value - 1)\r\n                        .filter(item => item.segments[1]?.stops.length !== value - 1)\r\n\r\n                    dispatch(setSortedTickets(filteredTickets))\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <List className={classes.root}>\r\n                {transferArr.map((item, index) => {\r\n                    const labelId = `checkbox-list-label-${item.name}`\r\n\r\n                    return (\r\n                        <ListItem\r\n                            key={`${item.name}`}\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            className={classes.listItem}\r\n                            onClick={() => handleToggle(item, index)}>\r\n                            <ListItemIcon className={classes.ListPadding}>\r\n                                <Checkbox\r\n                                    checked={item.checked}\r\n                                    className={classes.checkBox}\r\n                                    edge=\"start\"\r\n                                    disableRipple\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                    checkedIcon={\r\n                                        <span className={clsx(classes.icon, classes.checkedIcon)}>\r\n                                            <CheckIcon\r\n                                                style={{\r\n                                                    color: '#2196F3',\r\n                                                    padding: '0',\r\n                                                    position: 'absolute',\r\n                                                    top: '7px',\r\n                                                    left: '11px',\r\n                                                    width: '16px',\r\n                                                }}\r\n                                            />\r\n                                        </span>\r\n                                    }\r\n                                    icon={<span className={classes.icon} />}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={`${item.name}`} />\r\n                        </ListItem>\r\n                    )\r\n                })}\r\n            </List>\r\n        )\r\n    },\r\n    (prevProps, nextProps) => {\r\n        if (JSON.stringify(prevProps.allTickets) !== JSON.stringify(nextProps.allTickets)) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    },\r\n)\r\n","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nimport { ListOfCheckBox } from './ListOfCheckBox'\r\nimport { selectTickets } from '../store/tickets/selectors'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(0),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n            boxShadow: '-1px 1px 6px 1px #D5D5D5',\r\n            borderRadius: 10,\r\n            maxWidth: '230px',\r\n        },\r\n        headerText: {\r\n            padding: '20px 0 0 20px',\r\n            fontSize: 14,\r\n        },\r\n    }),\r\n)\r\n\r\nexport const SortCheckbox: React.FC = (): React.ReactElement => {\r\n    const classes = useStyles()\r\n    const allTickets = useSelector(selectTickets)\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Typography variant=\"subtitle1\" align=\"left\" className={classes.headerText}>\r\n                КОЛИЧЕСТВО ПЕРЕСАДОК\r\n            </Typography>\r\n            <ListOfCheckBox allTickets={allTickets} />\r\n        </Paper>\r\n    )\r\n}\r\n","export const formatter = new Intl.NumberFormat('ru', {\r\n    style: 'decimal',\r\n})","export const getRandomNum = (min: number, max: number) =>\r\n    Math.round(Math.random() * (max - min) + min)\r\n","import { format } from 'date-fns'\r\n\r\nexport const formatDurationToHoursAndMinutes = (duration: number): string => {\r\n    const hours = Math.floor(duration / 60)\r\n    const minutes = duration - hours * 60\r\n\r\n    return `${hours}ч ${minutes}м`\r\n}\r\n\r\nexport const formatOfFinishTime = (date: string, duration: number): string => {\r\n    return formatDateToHoursAndMinutes(\r\n        new Date(new Date(date).setMinutes(duration)).toString(),\r\n    )\r\n}\r\n\r\nexport const formatDateToHoursAndMinutes = (date: string): string => {\r\n    return format(new Date(date), 'HH:MM')\r\n}","import React from 'react'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport { Box, Paper, Typography } from '@material-ui/core'\r\nimport { formatter } from '../utils/formatPrice'\r\nimport { getRandomNum } from '../utils/getRandomNum'\r\nimport {\r\n    formatDurationToHoursAndMinutes,\r\n    formatDateToHoursAndMinutes,\r\n    formatOfFinishTime,\r\n} from '../utils/formateDate'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2.5),\r\n            paddingTop: '30px',\r\n            color: theme.palette.text.secondary,\r\n            boxShadow: '-1px 1px 6px 1px #D5D5D5',\r\n            borderRadius: 5,\r\n            display: 'flex',\r\n            flexFlow: 'column wrap',\r\n            marginBottom: '20px',\r\n        },\r\n        header: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginBottom: '25px',\r\n        },\r\n        price: {\r\n            fontWeight: 600,\r\n            fontSize: '24px',\r\n            lineHeight: '24px',\r\n            color: theme.palette.primary.main,\r\n        },\r\n        wayText: {\r\n            fontWeight: 400,\r\n            fontSize: '12px',\r\n            lineHeight: '18px',\r\n            letterSpacing: '0.5px',\r\n            marginBottom: '2px',\r\n            color: '#A0B0B9',\r\n        },\r\n        timeText: {\r\n            fontWeight: 600,\r\n            fontSize: '14px',\r\n            lineHeight: '21px',\r\n            color: theme.palette.secondary.main,\r\n        },\r\n        infoBlock: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n        },\r\n        infoBlockData: {\r\n            width: '110px'\r\n        }\r\n    }),\r\n)\r\n\r\n\r\ninterface Isegment {\r\n    origin: string\r\n    destination: string\r\n    date: string\r\n    stops: string[]\r\n    duration: number\r\n}\r\n\r\ninterface TicketProps {\r\n    price: number\r\n    segments: Isegment[]\r\n}\r\n\r\nexport const Ticket: React.FC<TicketProps> = ({\r\n    price,\r\n    segments,\r\n}: TicketProps): React.ReactElement => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <div className={classes.header}>\r\n                <div>\r\n                    <Typography className={classes.price}>{formatter.format(price)} Р</Typography>\r\n                </div>\r\n                <div>\r\n                    <img\r\n                        src={`//pics.avs.io/99/36/${getRandomNum(1, 9)}.png`}\r\n                        alt=\"avia company logo\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {segments.map((segment, index) => (\r\n                    <Box\r\n                        key={`${new Date(\r\n                            segment.duration,\r\n                        )}__${new Date().toString()}___${getRandomNum(0, 1000)}__${index}`}\r\n                        mb={2}\r\n                        className={classes.infoBlock}>\r\n                        <div className={classes.infoBlockData}>\r\n                            <Typography className={classes.wayText}>\r\n                                {segment.origin} - {segment.destination}\r\n                            </Typography>\r\n                            <Typography className={classes.timeText}>\r\n                                {formatDateToHoursAndMinutes(segment.date)} -{' '}\r\n                                {formatOfFinishTime(segment.date, segment.duration)}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.infoBlockData}>\r\n                            <Typography className={classes.wayText}>В ПУТИ</Typography>\r\n                            <Typography className={classes.timeText}>\r\n                                {formatDurationToHoursAndMinutes(segment?.duration)}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.infoBlockData}>\r\n                            <Typography className={classes.wayText}>\r\n                                {Number(segment.stops?.length) > 1\r\n                                    ? `${segment.stops?.length} ПЕРЕСАДКИ`\r\n                                    : Number(segment.stops?.length) < 1\r\n                                    ? 'БЕЗ ПЕРЕСАДОК'\r\n                                    : `${segment.stops?.length} ПЕРЕСАДКА`}\r\n                            </Typography>\r\n                            <Typography className={classes.timeText}>\r\n                                {segment.stops?.join(', ')}\r\n                            </Typography>\r\n                        </div>\r\n                    </Box>\r\n                ))}\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectSortedTickets } from '../store/tickets/selectors'\r\nimport { Iticket } from '../store/tickets/contracts/state'\r\nimport { setSortedTickets } from '../store/tickets/actionCreator'\r\n\r\ninterface StyledTabProps {\r\n    label: string\r\n    className?: string\r\n    onClick?: () => void\r\n}\r\n\r\nconst AntTabs = withStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    indicator: {\r\n        display: 'none',\r\n    },\r\n})(Tabs)\r\n\r\nconst AntTab = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            textTransform: 'none',\r\n            fontWeight: 600,\r\n            border: '1px solid #ccc',\r\n            color: theme.palette.secondary.main,\r\n            background: '#fff',\r\n            width: '100%',\r\n\r\n            '&:hover': {\r\n                color: '#40a9ff',\r\n                opacity: 1,\r\n            },\r\n            '&$selected': {\r\n                color: '#fff',\r\n                backgroundColor: theme.palette.primary.main,\r\n                fontWeight: theme.typography.fontWeightMedium,\r\n            },\r\n        },\r\n\r\n        selected: {},\r\n    }),\r\n)((props: StyledTabProps) => <Tab disableRipple {...props} />)\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing(1.5),\r\n    },\r\n    leftBdrs: {\r\n        borderRadius: '5px 0 0 5px',\r\n    },\r\n    rightBdrs: {\r\n        borderRadius: '0 5px 5px 0',\r\n    },\r\n}))\r\n\r\nexport const ButtonsGroup: React.FC = (): React.ReactElement => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const tickets = useSelector(selectSortedTickets)\r\n\r\n    const [value, setValue] = React.useState(0)\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => setValue(newValue)\r\n\r\n    const handleSortBtnClick = (type: string): void => {\r\n        if (type === 'fast') {\r\n            const ticketsSorted: Iticket[] = tickets\r\n                .concat()\r\n                .sort((ticket1: Iticket, ticket2: Iticket): number => {\r\n                    if (ticket1.segments[0]?.duration > ticket2.segments[0]?.duration) return 1\r\n\r\n                    if (ticket1.segments[0]?.duration === ticket2.segments[0]?.duration) return 0\r\n\r\n                    if (ticket1.segments[0]?.duration < ticket2.segments[0]?.duration) return -1\r\n\r\n                    return 1\r\n                })\r\n\r\n            dispatch(setSortedTickets(ticketsSorted))\r\n        }\r\n\r\n        if (type === 'cheap') {\r\n            const ticketsSorted: Iticket[] = tickets\r\n                .concat()\r\n                .sort((ticket1: Iticket, ticket2: Iticket): number => {\r\n                    if (ticket1.price > ticket2.price) return 1\r\n                    if (ticket1.price === ticket2.price) return 0\r\n                    if (ticket1.price < ticket2.price) return -1\r\n                    return 1\r\n                })\r\n\r\n            dispatch(setSortedTickets(ticketsSorted))\r\n        }\r\n\r\n        if (type === 'optimal') {\r\n            const avgPrice = Math.round(\r\n                tickets.reduce((sum, item) => (sum = sum + item.price), 0) / tickets.length,\r\n            )\r\n            \r\n            const optimalFromPriceTickets: Iticket[] = tickets\r\n                .filter(item => item.price < avgPrice / 2)\r\n                .sort((ticket1: Iticket, ticket2: Iticket): number => {\r\n                    if (ticket1.segments[0]?.duration > ticket2.segments[0]?.duration) return 1\r\n\r\n                    if (ticket1.segments[0]?.duration === ticket2.segments[0]?.duration) return 0\r\n\r\n                    if (ticket1.segments[0]?.duration < ticket2.segments[0]?.duration) return -1\r\n\r\n                    return 1\r\n                })\r\n            dispatch(\r\n                setSortedTickets(Array.from(new Set([...optimalFromPriceTickets, ...tickets]))),\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AntTabs\r\n                variant=\"fullWidth\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"ant example\">\r\n                <AntTab\r\n                    onClick={() => handleSortBtnClick('cheap')}\r\n                    className={classes.leftBdrs}\r\n                    label=\"САМЫЙ ДЕШЁВЫЙ\"\r\n                />\r\n                <AntTab onClick={() => handleSortBtnClick('fast')} label=\"САМЫЙ БЫСТРЫЙ\" />\r\n                <AntTab\r\n                    onClick={() => handleSortBtnClick('optimal')}\r\n                    className={classes.rightBdrs}\r\n                    label=\"ОПТИМАЛЬНЫЙ\"\r\n                />\r\n            </AntTabs>\r\n            <Typography className={classes.padding} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        btnText: {\r\n            width: '100%',\r\n            height: '50px',\r\n            fontSize: '12px',\r\n        },\r\n    }),\r\n)\r\n\r\ninterface ShowFiveMoreProps {\r\n    onClick: () => void\r\n}\r\n\r\nexport const ShowFiveMore: React.FC<ShowFiveMoreProps> = ({\r\n    onClick,\r\n}: ShowFiveMoreProps): React.ReactElement => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Button onClick={onClick} className={classes.btnText} variant=\"contained\" color=\"primary\">\r\n            Показать ещё 5 билетов!\r\n        </Button>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\n\n// Material UI components\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\n\n// Redux\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchTickets } from './store/tickets/actionCreator'\nimport { selectLoadingState, selectSortedTickets } from './store/tickets/selectors'\n\nimport logo from './assets/logo.svg'\n\n// Components\nimport { SortCheckbox } from './components/SortCheckbox'\nimport { Ticket } from './components/Ticket'\nimport { ButtonsGroup } from './components/ButtonsGroup'\nimport { ShowFiveMore } from './components/ShowFiveMore'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            background: '#f3f7fa',\n            height: '100vh',\n            padding: '0 110px',\n        },\n        circular: {\n            display: 'flex',\n            justifyContent: 'center',\n        },\n    }),\n)\n\nfunction App() {\n    const classes = useStyles()\n\n    const dispatch = useDispatch()\n    const loadingState = useSelector(selectLoadingState)\n    const sortedTickets = useSelector(selectSortedTickets)\n    const [ticketsOnPageCount, setTicketsOnPageCount] = useState<number>(5)\n    \n    useEffect(() => {\n        dispatch(fetchTickets())\n    }, [dispatch])\n\n    const showMoreHandler = (): void => {\n        setTicketsOnPageCount(ticketsOnPageCount + 5)\n    }\n\n    return (\n        <div className=\"App\">\n            <React.Fragment>\n                <CssBaseline />\n                <Container maxWidth=\"md\" className={classes.root}>\n                    <Grid container spacing={2}>\n                        <Grid item container justifyContent=\"center\" xs={12}>\n                            <Box mt={3}>\n                                <img src={logo} alt=\"logo Aviasales\" />\n                            </Box>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <SortCheckbox />\n                        </Grid> \n                        <Grid item xs={8}>\n                            <ButtonsGroup />\n                            {loadingState === 'LOADING' || loadingState === 'NEVER' ? (\n                                <Box mb={3} className={classes.circular}>\n                                    <CircularProgress />\n                                </Box>\n                            ) : loadingState === 'ERROR' ? (\n                                'ошибка сервера'\n                            ) : (\n                                <>\n                                    {sortedTickets.map((ticket, index) => (\n                                        index < ticketsOnPageCount &&\n                                        <Ticket\n                                            key={`${\n                                                ticket.price\n                                            }__${new Date().toString()}__${index}`}\n                                            price={ticket.price}\n                                            segments={ticket.segments}\n                                        />\n                                    ))}\n                                    <ShowFiveMore onClick={showMoreHandler} />\n                                </>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Container>\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default App\n","import { createTheme } from '@material-ui/core/styles'\r\n\r\nexport const theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#2196F3',\r\n        },\r\n        secondary: {\r\n            main: '#4A4A4A',\r\n        },\r\n        background: {\r\n            default: '#F3F7FA',\r\n        },\r\n    },\r\n    typography: {\r\n        subtitle1: {\r\n            color: '#4A4A4A',\r\n            fontSize: '1rem',\r\n        },\r\n        subtitle2: {\r\n            color: '#A0B0B9',\r\n            fontSize: '1rem',\r\n        },\r\n    },\r\n    overrides: {\r\n        MuiListItemIcon: {\r\n            root: {\r\n                minWidth: 'auto',\r\n            },\r\n        },\r\n        MuiTab: {\r\n            wrapper: {\r\n                fontSize: '12px',\r\n            }\r\n        },\r\n        \r\n    },\r\n    \r\n})\r\n","import { ThemeProvider } from '@material-ui/styles'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\n\nimport App from './App'\n\nimport './index.css'\nimport { theme } from './theme'\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </ThemeProvider>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}